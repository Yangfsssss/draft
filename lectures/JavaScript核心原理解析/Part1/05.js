/** 05，for (let x of [1,2,3]) ...：for循环并不比使用函数递归节省开销 */
//js = 语句 + 表达式
//语句 = 顺序 + 分支 + 循环 + etc
//循环

Function.prototype.log = function (...args) {
	console.log(this(...args));
};

//块----------------------------------------------------------------------------------------------
//绝大多数 JavaScript 语句都并没有自己的块级作用域。从语言设计的原则上来看，
//越少作用域的执行环境调度效率也就越高，执行时的性能也就越好
function block() {
	var x = 100;
	var c = 'a';

  //switch的所有分支共享一个块级作用域
	switch (c) {
		case 'a':
			console.log(x);//ReferenceError
			break;
		case 'b':
			let x = 200;
			break;
	}

  //例1
  try{
    //作用域1
  }
  catch(e){ //表达式e位于作用域2
    //作用域2
  }
  finally{
    //作用域3
  }

  //例2
  //没有使用大括号
  with(x) /** 作用域1 */;

  //例3，块语句
  {
    //作用域1
  }

  //if条件语句中的块级作用域是由一对大括号自带的
  //与上例3相同，而与if本身无关
  if(x){}
  //or
  if(x){}else{}
};

// block();

//循环语句中的块----------------------------------------------------------------------------
for(const x in {})
  console.log(x);
